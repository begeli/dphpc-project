/usr/bin/mpirun -np 8 python /home/daniel/Desktop/pres/tensor-contraction/code/main.py
/home/daniel/Desktop/pres/tensor-contraction/code/sdg/tests/sdg_test.py:57: UserWarning: NESTED SDFG NOT FOUND
  warnings.warn('NESTED SDFG NOT FOUND')
MATLAB is selecting SOFTWARE OPENGL rendering.

                            < M A T L A B (R) >
                  Copyright 1984-2021 The MathWorks, Inc.
             R2021b Update 1 (9.11.0.1809720) 64-bit (glnxa64)
                              November 2, 2021


To get started, type doc.
For product information, visit www.mathworks.com.


ans =

    'waiting for the python client on port'


port =

       30000


ans =

    'Matlab server running'


ans =

    'Initial timeout value'


timeout =

    60


ans =

    'Setting timeout to'


timeout =

    10


ans =

    'setting debug to'


debug =

     1


ans =

    'Setting timeout to'


timeout =

   300


ans =

    'Setting timeout to'


timeout =

   300


ans =

    'command'


command =

    'j*l + k*l;j*k*l'


ans =

    'solving input'


input =

j*l + k*l


ans =

    'output'


output =

j*k*l


ans =

    'writing output'


outputJson =

    "{
     "variables": ["j", "k", "l"],
     "rhoOpts": ["S"],
     "varsOpt": ["X/2", "X/2", "1"],
     "Xopts": ["2*S"],
     "inner_tile": ["S", "S", "1"],
     "outer_tile": ["S/2", "S/2", "1"]
     }"


ans =

    'command'


command =

    'i*j*k + i*l + j*k*l;i*j*k*l'


ans =

    'solving input'


input =

i*l + i*j*k + j*k*l


ans =

    'output'


output =

i*j*k*l


ans =

    'writing output'


outputJson =

    "{
     "variables": ["i", "j", "k", "l"],
     "rhoOpts": ["S^(1/2)/2"],
     "varsOpt": ["(3^(1/2)*X^(1/2))/3", "(3^(1/2)*X^(1/2))/3", "1", "(3^(1/2)*X^(1/2))/3"],
     "Xopts": ["3*S"],
     "inner_tile": ["S^(1/2)", "S^(1/2)", "1", "S^(1/2)"],
     "outer_tile": ["(3^(1/2)*S^(1/2))/3", "(3^(1/2)*S^(1/2))/3", "1", "(3^(1/2)*S^(1/2))/3"]
     }"


ans =

    'command'


command =

    'i*j*k + i*l + j*k*l;i*j*k*l'


ans =

    'solving input'


input =

i*l + i*j*k + j*k*l


ans =

    'output'


output =

i*j*k*l


ans =

    'writing output'


outputJson =

    "{
     "variables": ["i", "j", "k", "l"],
     "rhoOpts": ["S^(1/2)/2"],
     "varsOpt": ["(3^(1/2)*X^(1/2))/3", "(3^(1/2)*X^(1/2))/3", "1", "(3^(1/2)*X^(1/2))/3"],
     "Xopts": ["3*S"],
     "inner_tile": ["S^(1/2)", "S^(1/2)", "1", "S^(1/2)"],
     "outer_tile": ["(3^(1/2)*S^(1/2))/3", "(3^(1/2)*S^(1/2))/3", "1", "(3^(1/2)*S^(1/2))/3"]
     }"


ans =

    'command'


command =

    'i*j*k + i*l + j*l + k*l;i*j*k*l'


ans =

    'solving input'


input =

i*l + j*l + k*l + i*j*k


ans =

    'output'


output =

i*j*k*l


ans =

    'writing output'


outputJson =

    "{
     "variables": ["i", "j", "k", "l"],
     "rhoOpts": ["S^(2/3)/3"],
     "varsOpt": ["(2^(1/3)*5^(2/3)*X^(1/3))/5", "(2^(1/3)*5^(2/3)*X^(1/3))/5", "(2^(1/3)*5^(2/3)*X^(1/3))/5", "(2^(2/3)*5^(1/3)*X^(2/3))/10"],
     "Xopts": ["(5*S)/2"],
     "inner_tile": ["S^(1/3)", "S^(1/3)", "S^(1/3)", "S^(2/3)/2"],
     "outer_tile": ["(2^(1/3)*5^(2/3)*S^(1/3))/5", "(2^(1/3)*5^(2/3)*S^(1/3))/5", "(2^(1/3)*5^(2/3)*S^(1/3))/5", "(2^(2/3)*5^(1/3)*S^(2/3))/10"]
     }"

[('p', 8), ('Ss', 32768), ('S0', 64), ('S1', 64), ('S2', 64), ('S3', 64)]
((2, 1), set(), 'kl,jl->klj', ('ijk', 'klj'), False)
((1, 0), {'j', 'k'}, 'klj,ijk->il', ('il',), 'TDOT')

Waiting for the Matlab server to start....


Connected

Evaluating  ijk,jl,kl :

input: j*l + k*l,   output: j*k*l
input: i*j*k + i*l + j*k*l,   output: i*j*k*l
WE ARE IN PERFORM_SDG_ANALYSIS
Number of nodes in the SDG: 6
input: i*j*k + i*l + j*k*l,   output: i*j*k*l
input: i*j*k + i*l + j*l + k*l,   output: i*j*k*l
Kernel:              out1_1;out0_1
Iteration variables: [i, j, k, l]
Inner tile:          [Ss**(1/3), streaming, Ss**(1/3), Ss**(2/3)/2]
Outer tile:          [2**(1/3)*5**(2/3)*Ss**(1/3)/5, 5*2**(2/3)*5**(1/3)*S0*S1*S2*S3/(2*Ss**(4/3)*p), 2**(1/3)*5**(2/3)*Ss**(1/3)/5, 2**(2/3)*5**(1/3)*Ss**(2/3)/10]
Streaming direction: j
Comp. intensity:     Ss**(2/3)/3

Using all 8 processors.


rank 0 should receive the following subsets of input arrays:
{'inp0': {'i': (0, 32), 'j': (0, 32), 'k': (0, 32)}, 'out1': {'i': (0, 32), 'l': (0, 64)}, 'inp2': {'k': (0, 32), 'l': (0, 64)}, 'inp1': {'j': (0, 32), 'l': (0, 64)}}

rank 1 should receive the following subsets of input arrays:
{'inp0': {'i': (0, 32), 'j': (0, 32), 'k': (32, 64)}, 'out1': {'i': (0, 32), 'l': (0, 64)}, 'inp2': {'k': (32, 64), 'l': (0, 64)}, 'inp1': {'j': (0, 32), 'l': (0, 64)}}

rank 2 should receive the following subsets of input arrays:
{'inp0': {'i': (0, 32), 'j': (32, 64), 'k': (0, 32)}, 'out1': {'i': (0, 32), 'l': (0, 64)}, 'inp2': {'k': (0, 32), 'l': (0, 64)}, 'inp1': {'j': (32, 64), 'l': (0, 64)}}

rank 3 should receive the following subsets of input arrays:
{'inp0': {'i': (0, 32), 'j': (32, 64), 'k': (32, 64)}, 'out1': {'i': (0, 32), 'l': (0, 64)}, 'inp2': {'k': (32, 64), 'l': (0, 64)}, 'inp1': {'j': (32, 64), 'l': (0, 64)}}

rank 4 should receive the following subsets of input arrays:
{'inp0': {'i': (32, 64), 'j': (0, 32), 'k': (0, 32)}, 'out1': {'i': (32, 64), 'l': (0, 64)}, 'inp2': {'k': (0, 32), 'l': (0, 64)}, 'inp1': {'j': (0, 32), 'l': (0, 64)}}

rank 5 should receive the following subsets of input arrays:
{'inp0': {'i': (32, 64), 'j': (0, 32), 'k': (32, 64)}, 'out1': {'i': (32, 64), 'l': (0, 64)}, 'inp2': {'k': (32, 64), 'l': (0, 64)}, 'inp1': {'j': (0, 32), 'l': (0, 64)}}

rank 6 should receive the following subsets of input arrays:
{'inp0': {'i': (32, 64), 'j': (32, 64), 'k': (0, 32)}, 'out1': {'i': (32, 64), 'l': (0, 64)}, 'inp2': {'k': (0, 32), 'l': (0, 64)}, 'inp1': {'j': (32, 64), 'l': (0, 64)}}

rank 7 should receive the following subsets of input arrays:
{'inp0': {'i': (32, 64), 'j': (32, 64), 'k': (32, 64)}, 'out1': {'i': (32, 64), 'l': (0, 64)}, 'inp2': {'k': (32, 64), 'l': (0, 64)}, 'inp1': {'j': (32, 64), 'l': (0, 64)}}
Total data movement 3*S0*S1*S2*S3/S^(2/3)
ijk,jl,kl                     Q: 3*S0*S1*S2*S3/S^(2/3)

